<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:security="http://www.springframework.org/schema/security"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:oauth2="http://www.springframework.org/schema/security/oauth2" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">

	<context:annotation-config />
	<context:component-scan base-package="org.personal.mason.feop.oauth.service" />

	<import resource="beans.xml" />
	<import resource="auditing-context.xml" />

	<security:http pattern="/resources/**" security="none" />
	<security:global-method-security pre-post-annotations="enabled" proxy-target-class="true">
		<security:expression-handler ref="oauthExpressionHandler" />
	</security:global-method-security>
	
	<oauth2:expression-handler id="oauthExpressionHandler" />
	<oauth2:web-expression-handler id="oauthWebExpressionHandler" />

	<!-- 获取Accesson Token -->
	<security:http pattern="/oauth/token" create-session="stateless" authentication-manager-ref="clientAuthenticationManager">
		<security:intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
		<security:anonymous enabled="false" />
		<security:http-basic entry-point-ref="clientAuthenticationEntryPoint" />
		<!-- include this only if you need to authenticate clients via request parameters -->
		<security:custom-filter ref="clientCredentialsTokenEndpointFilter" before="BASIC_AUTH_FILTER" />
		<security:access-denied-handler ref="oauthAccessDeniedHandler" />
	</security:http>

<!-- 	<security:http pattern="/oauth/(users|clients)/.*" request-matcher="regex" create-session="stateless" entry-point-ref="oauthAuthenticationEntryPoint" -->
<!-- 		use-expressions="true"> -->
<!-- 		<security:anonymous enabled="false" /> -->
<!-- 		<security:intercept-url pattern="/oauth/users/([^/].*?)/tokens/.*" -->
<!-- 			access="#oauth2.clientHasRole('ROLE_CLIENT') and (hasRole('ROLE_USER') or #oauth2.isClient()) and #oauth2.hasScope('write')" method="DELETE" /> -->
<!-- 		<security:intercept-url pattern="/oauth/users/.*" -->
<!-- 			access="#oauth2.clientHasRole('ROLE_CLIENT') and (hasRole('ROLE_USER') or #oauth2.isClient()) and #oauth2.hasScope('read')" method="GET" /> -->
<!-- 		<security:intercept-url pattern="/oauth/clients/.*" -->
<!-- 			access="#oauth2.clientHasRole('ROLE_CLIENT') and #oauth2.isClient() and #oauth2.hasScope('read')" method="GET" /> -->
<!-- 		<security:intercept-url pattern="/**" access="denyAll()" /> -->
<!-- 		<security:custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" /> -->
<!-- 		<security:access-denied-handler ref="oauthAccessDeniedHandler" /> -->
<!-- 		<security:expression-handler ref="oauthWebExpressionHandler" /> -->
<!-- 	</security:http> -->
	
	<security:http pattern="/token/**" create-session="stateless" authentication-manager-ref="clientAuthenticationManager">
		<security:intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY"/>
		<security:anonymous enabled="false"/>
		<security:http-basic entry-point-ref="clientAuthenticationEntryPoint"/>
		<security:access-denied-handler ref="oauthAccessDeniedHandler"/>
	</security:http>

	<!-- The OAuth2 protected resources are separated out into their own block so we can deal with authorization and error handling separately. This 
		isn't mandatory, but it makes it easier to control the behaviour. -->
	<security:http pattern="/client/**" create-session="never" entry-point-ref="oauthAuthenticationEntryPoint"
		access-decision-manager-ref="accessDecisionManager">
		<security:anonymous enabled="false" />
		<security:intercept-url pattern="/client/" access="IS_AUTHENTICATED_FULLY" />
		<security:intercept-url pattern="/client/form" access="IS_AUTHENTICATED_FULLY" />
		<security:intercept-url pattern="/client/info" access="IS_AUTHENTICATED_FULLY" />
		<security:intercept-url pattern="/client/create" access="IS_AUTHENTICATED_FULLY" />
		<security:intercept-url pattern="/client/list" access="IS_AUTHENTICATED_FULLY" />
		<security:intercept-url pattern="/client/delete/**" access="IS_AUTHENTICATED_FULLY" />

		<security:access-denied-handler ref="oauthAccessDeniedHandler" />
	</security:http>

	<!-- OAuth2 Server端 用户登录验证 -->
	<security:http>
		<security:intercept-url pattern="/oauth/**" access="ROLE_USER" />
		<security:intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />

		<security:form-login authentication-failure-url="/login?error=true" default-target-url="/home" login-page="/login"
			login-processing-url="/oauth/login.do" />
		<security:session-management invalid-session-url="/">
			<security:concurrency-control max-sessions="1" error-if-maximum-exceeded="true" />
		</security:session-management>

		<security:logout logout-success-url="/logout" logout-url="/oauth/logout.do" />
		<security:anonymous />
	</security:http>

	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider user-service-ref="myUserDetailsService">
			<security:password-encoder ref="passwordEncoder" />
		</security:authentication-provider>
	</security:authentication-manager>

	<!-- 服务点的验证与授权方式 -->
	<oauth2:authorization-server client-details-service-ref="clientDetails" token-services-ref="tokenServices"
		authorization-endpoint-url="/oauth/authorize" token-endpoint-url="/oauth/token">
		<oauth2:authorization-code />
		<oauth2:implicit />
		<oauth2:refresh-token />
		<oauth2:client-credentials />
		<oauth2:password />
	</oauth2:authorization-server>

	<bean id="oauth2AuthorizationCodeService" class="org.personal.mason.feop.oauth.service.oauth2.OAuth2AuthorizationCodeServices" />

	<!-- In Memory DataStore <bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.InMemoryTokenStore" /> -->
	<!-- JDBC DataStore -->
	<bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.JdbcTokenStore">
		<constructor-arg ref="dataSource" />
	</bean>
	<!-- <bean id="tokenStore" class="org.personal.mason.feop.oauth.service.oauth2.OAuth2TokenStore" p:accessTokenService-ref="accessTokenService" p:refreshTokenService-ref="refreshTokenService" 
		/> -->
	<bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
		<property name="tokenStore" ref="tokenStore" />
		<property name="supportRefreshToken" value="true" />
		<property name="accessTokenValiditySeconds" value="3600" />
		<property name="refreshTokenValiditySeconds" value="36000" />
	</bean>
	<!-- 配置服务端受保护的资源 -->
	<!-- Resource Server Configuration 过滤受保护的资源 初始化时候（@link CompositeFilter）组成一个过滤链来处理access_token的有效性 （@link CompositeFilter）过滤器包含Oauth一组过滤链（@link 
		OAuth2ExceptionHandlerFilter OAuth2ProtectedResourceFilter） -->
	<oauth2:resource-server id="resourceServerFilter" resource-id="sparklr" token-services-ref="tokenServices" />

	<!-- 预先注册的客户端（consumer）相关配置信息 -->
	<bean id="clientDetails" class="org.springframework.security.oauth2.provider.JdbcClientDetailsService">
		<constructor-arg name="dataSource" ref="dataSource" />
	</bean>

	<!-- <bean id="clientDetails" class="org.personal.mason.feop.oauth.service.oauth2.OAuth2ClientDetailsService" p:clientDetailService-ref="clientDetailService" 
		/> -->

	<bean id="userApprovalHandler" class="org.personal.mason.feop.oauth.service.oauth2.OAuth2UserApprovalHandler">
		<property name="tokenServices" ref="tokenServices" />
	</bean>
	<bean id="clientDetailsUserService" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<constructor-arg ref="clientDetails" />
	</bean>

	<security:authentication-manager id="clientAuthenticationManager">
		<security:authentication-provider user-service-ref="clientDetailsUserService" />
	</security:authentication-manager>

	<bean id="oauthAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="sparklr2" />
	</bean>

	<bean id="clientAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="sparklr2/client" />
		<property name="typeName" value="Basic" />
	</bean>

	<bean id="clientCredentialsTokenEndpointFilter" class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		<property name="authenticationManager" ref="clientAuthenticationManager" />
	</bean>

	<bean id="oauthAccessDeniedHandler" class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">
		<constructor-arg>
			<list>
				<bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
				<bean class="org.springframework.security.access.vote.RoleVoter" />
				<bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
			</list>
		</constructor-arg>
	</bean>

	<bean id="accessConfirmationController" class="org.personal.mason.feop.oauth.service.mvc.controllers.AccessConfirmationController">
		<property name="clientDetailsService" ref="clientDetails" />
	</bean>

	<!--配置业务模型层 -->
	<bean id="myUserDetailsService" class="org.personal.mason.feop.oauth.service.oauth2.OAuth2UserDetailsServiceImpl" />


	<!-- <security:http pattern="/register/**"> <security:intercept-url pattern="/register/client" access="IS_AUTHENTICATED_ANONYMOUSLY" /> <security:form-login 
		authentication-failure-url="/login?error=true" default-target-url="/index" login-page="/login" login-processing-url="/oauth/login.do" /> <security:logout 
		logout-success-url="/index" logout-url="/oauth/logout.do" /> <security:anonymous /> </security:http> -->
</beans>